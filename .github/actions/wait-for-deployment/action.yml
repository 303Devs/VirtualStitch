name: 'Wait for Deployment'
description: 'Intelligently wait for deployment to be ready with retries'

inputs:
  url:
    description: 'Deployment URL to check'
    required: true
  timeout_seconds:
    description: 'Maximum time to wait'
    required: false
    default: '90'
  check_interval:
    description: 'Seconds between checks'
    required: false
    default: '10'
  max_attempts:
    description: 'Maximum number of attempts'
    required: false
    default: '5'
  initial_wait:
    description: 'Initial wait before first check'
    required: false
    default: '5'
  vercel_bypass_secret:
    description: 'Vercel automation bypass secret (optional)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Wait for deployment readiness
      shell: bash
      run: |
        echo "üîÑ Waiting for deployment to be ready..."
        echo "üìç URL: ${{ inputs.url }}"
        echo "‚è±Ô∏è Timeout: ${{ inputs.timeout_seconds }}s"
        echo "üîÑ Check interval: ${{ inputs.check_interval }}s"
        echo "üéØ Max attempts: ${{ inputs.max_attempts }}"

        # Initial wait to let deployment stabilize
        echo "‚è≥ Initial wait of ${{ inputs.initial_wait }} seconds..."
        sleep ${{ inputs.initial_wait }}

        # Function to check if URL is ready
        check_url() {
          local url="$1"
          local attempt="$2"
          
          echo "üß™ Attempt $attempt: Testing $url"
          
          # Build curl command with optional Vercel bypass secret
          local curl_cmd="curl -f --max-time 30 --silent --show-error"
          
          # Add Vercel bypass secret if provided
          if [ -n "${{ inputs.vercel_bypass_secret }}" ]; then
            curl_cmd="$curl_cmd -H 'x-vercel-protection-bypass: ${{ inputs.vercel_bypass_secret }}'"
            echo "  üîë Using Vercel automation bypass"
          fi
          
          # Execute the curl command
          if eval "$curl_cmd \"$url\"" > /dev/null 2>&1; then
            echo "‚úÖ Deployment is ready!"
            return 0
          else
            echo "‚ö†Ô∏è Deployment not ready yet"
            return 1
          fi
        }

        # Retry logic with exponential backoff
        attempt=1
        max_attempts=${{ inputs.max_attempts }}
        check_interval=${{ inputs.check_interval }}

        while [ $attempt -le $max_attempts ]; do
          if check_url "${{ inputs.url }}" $attempt; then
            echo "üéâ Deployment ready after $attempt attempt(s)"
            exit 0
          fi
          
          if [ $attempt -lt $max_attempts ]; then
            echo "‚è≥ Waiting $check_interval seconds before next attempt..."
            sleep $check_interval
            
            # Exponential backoff (up to 30s max)
            check_interval=$(( check_interval < 30 ? check_interval + 5 : 30 ))
          fi
          
          attempt=$((attempt + 1))
        done

        echo "‚ùå Deployment failed to become ready after $max_attempts attempts"
        echo "üîç Final check with verbose output:"

        # Final verbose check with Vercel bypass if available
        if [ -n "${{ inputs.vercel_bypass_secret }}" ]; then
          curl -v --max-time 30 -H "x-vercel-protection-bypass: ${{ inputs.vercel_bypass_secret }}" "${{ inputs.url }}" || true
        else
          curl -v --max-time 30 "${{ inputs.url }}" || true
        fi

        exit 1
