name: 'Report Check Result'
description: 'Send check result to GitHub App using webhook (required for Checks API access)'

inputs:
  sha:
    description: 'The commit SHA to associate the check with'
    required: true
  status:
    description: 'The current status of the check'
    required: true
  conclusion:
    description: 'The final conclusion of the check'
    required: false
  name:
    description: 'The name of the check run'
    required: true
  title:
    description: 'The title shown in the GitHub Checks UI'
    required: true
  summary:
    description: 'A brief summary of the check result'
    required: true
  details_url:
    description: 'URL linking to detailed information'
    required: true
  host:
    description: 'The domain to send the POST request to'
    required: true
  app_secret:
    description: 'Internal app secret to authorize the check update'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Report check status via webhook
      uses: actions/github-script@v7
      env:
        INPUT_HOST: ${{ inputs.host }}
        INPUT_APP_SECRET: ${{ inputs.app_secret }}
      with:
        script: |
          // Input validation
          const requiredInputs = ['${{ inputs.sha }}', '${{ inputs.status }}', '${{ inputs.name }}'];
          if (requiredInputs.some(input => !input)) {
            core.setFailed('Missing required inputs (sha, status, or name)');
            return;
          }

          const ownerUpper = context.repo.owner.toUpperCase();
          const payload = {
            sha: '${{ inputs.sha }}',
            status: '${{ inputs.status }}',
            conclusion: '${{ inputs.conclusion }}' || null,
            name: '${{ inputs.name }}',
            title: '${{ inputs.title }}',
            summary: '${{ inputs.summary }}',
            details_url: '${{ inputs.details_url }}'
          };

          core.info(`üìù Reporting check status for: ${payload.name} (${payload.status})`);

          // Retry logic with exponential backoff
          const maxRetries = 3;
          let retryDelay = 2000;

          for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
              core.info(`üöÄ Attempting webhook request (attempt ${attempt}/${maxRetries})`);
              
              const response = await fetch(
                `https://${process.env.INPUT_HOST}/api/github-webhook/${ownerUpper}/report`,
                {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.INPUT_APP_SECRET}`,
                    'Content-Type': 'application/json',
                    'User-Agent': 'GitHub-Actions-CheckReporter/1.0'
                  },
                  body: JSON.stringify(payload)
                }
              );
              
              if (response.ok) {
                const responseText = await response.text();
                core.info(`‚úÖ Check status reported successfully (HTTP ${response.status})`);
                if (responseText) core.info(`Response: ${responseText}`);
                return;
              } else {
                const errorText = await response.text();
                core.warning(`‚ö†Ô∏è Webhook request failed with HTTP ${response.status}: ${errorText}`);
                
                if (attempt < maxRetries) {
                  core.info(`üîÑ Retrying in ${retryDelay}ms...`);
                  await new Promise(resolve => setTimeout(resolve, retryDelay));
                  retryDelay *= 2; // Exponential backoff
                }
              }
            } catch (error) {
              core.warning(`‚ö†Ô∏è Webhook request failed with error: ${error.message}`);
              
              if (attempt < maxRetries) {
                core.info(`üîÑ Retrying in ${retryDelay}ms...`);
                await new Promise(resolve => setTimeout(resolve, retryDelay));
                retryDelay *= 2;
              }
            }
          }

          core.setFailed(`‚ùå Failed to report check status after ${maxRetries} attempts`);
