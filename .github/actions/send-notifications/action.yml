name: 'Send Deployment Notification'
description: 'Send email notifications for deployment status with enhanced templates'

inputs:
  type:
    description: 'Notification type: success or failure'
    required: true
  deployment_url:
    description: 'Deployment URL'
    required: true
  commit_sha:
    description: 'Commit SHA'
    required: true
  branch:
    description: 'Branch name'
    required: true
  author:
    description: 'Commit author'
    required: true
  smtp_username:
    description: 'SMTP username'
    required: true
  smtp_password:
    description: 'SMTP password'
    required: true
  recipient_email:
    description: 'Recipient email address'
    required: true
  health_checks:
    description: 'JSON object with health check results'
    required: false
    default: '{}'

runs:
  using: 'composite'
  steps:
    - name: Generate enhanced email content
      shell: bash
      run: |
        # Parse health checks
        HEALTH_CHECKS='${{ inputs.health_checks }}'

        # Generate timestamp
        TIMESTAMP=$(date -Iseconds)

        # Calculate health score
        TOTAL_CHECKS=0
        PASSED_CHECKS=0

        if [ "$HEALTH_CHECKS" != "{}" ]; then
          # Count total and passed checks
          TOTAL_CHECKS=$(echo "$HEALTH_CHECKS" | jq 'length')
          PASSED_CHECKS=$(echo "$HEALTH_CHECKS" | jq '[.[] | select(. == "success" or . == "valid")] | length')
        fi

        # Calculate health percentage
        if [ $TOTAL_CHECKS -gt 0 ]; then
          HEALTH_SCORE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
        else
          HEALTH_SCORE=100
        fi

        # Set email subject and body based on type
        if [ "${{ inputs.type }}" = "success" ]; then
          SUBJECT="‚úÖ Production Deployment Successful (${HEALTH_SCORE}%) - ${{ inputs.branch }}"
          
          # Generate enhanced health check results for success
          HEALTH_RESULTS=""
          if [ "$HEALTH_CHECKS" != "{}" ]; then
            HEALTH_RESULTS="<h3>üéØ Health Check Results (Score: ${HEALTH_SCORE}%)</h3><ul>"
            
            # Smoke tests
            SMOKE_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.smoke_tests // "unknown"')
            if [ "$SMOKE_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üî• Smoke Tests:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üî• Smoke Tests:</strong> ‚ùå Failed</li>"
            fi
            
            # API health
            API_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.api_health // "unknown"')
            if [ "$API_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üåê API Health:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üåê API Health:</strong> ‚ùå Failed</li>"
            fi
            
            # Performance
            PERF_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.performance // "unknown"')
            if [ "$PERF_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>‚ö° Performance:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>‚ö° Performance:</strong> ‚ö†Ô∏è Issues Detected</li>"
            fi
            
            # Security
            SEC_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.security // "unknown"')
            if [ "$SEC_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üõ°Ô∏è Security:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üõ°Ô∏è Security:</strong> ‚ö†Ô∏è Issues Detected</li>"
            fi
            
            # Production validation
            PROD_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.production_validation // "unknown"')
            if [ "$PROD_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üöÄ Production Validation:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üöÄ Production Validation:</strong> ‚ö†Ô∏è Issues Detected</li>"
            fi
            
            # SSL certificate
            SSL_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.ssl_certificate // "unknown"')
            if [ "$SSL_STATUS" = "valid" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üîí SSL Certificate:</strong> ‚úÖ Valid</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üîí SSL Certificate:</strong> ‚ö†Ô∏è Issues Detected</li>"
            fi
            
            HEALTH_RESULTS="${HEALTH_RESULTS}</ul>"
          fi
          
          # Health score badge
          if [ $HEALTH_SCORE -ge 90 ]; then
            HEALTH_BADGE="üü¢ Excellent"
          elif [ $HEALTH_SCORE -ge 75 ]; then
            HEALTH_BADGE="üü° Good"
          elif [ $HEALTH_SCORE -ge 50 ]; then
            HEALTH_BADGE="üü† Warning"
          else
            HEALTH_BADGE="üî¥ Critical"
          fi
          
          BODY="<h2>üöÄ Production Deployment Successful!</h2>
          
          <div style=\"background-color: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px; margin-bottom: 20px;\">
            <h3 style=\"margin-top: 0; color: #155724;\">üìä Health Score: ${HEALTH_SCORE}% (${HEALTH_BADGE})</h3>
            <p style=\"margin-bottom: 0; color: #155724;\">Your deployment has passed comprehensive validation and is performing excellently!</p>
          </div>
          
          <h3>üìã Deployment Details</h3>
          <ul>
            <li><strong>üåê URL:</strong> <a href=\"${{ inputs.deployment_url }}\">${{ inputs.deployment_url }}</a></li>
            <li><strong>üìù Commit:</strong> <code>${{ inputs.commit_sha }}</code></li>
            <li><strong>üåø Branch:</strong> ${{ inputs.branch }}</li>
            <li><strong>üë§ Author:</strong> ${{ inputs.author }}</li>
            <li><strong>‚è∞ Time:</strong> ${TIMESTAMP}</li>
          </ul>
          
          ${HEALTH_RESULTS}
          
          <h3>üéâ What's Working</h3>
          <ul>
            <li>‚úÖ All critical functionality is operational</li>
            <li>‚úÖ API endpoints are responding correctly</li>
            <li>‚úÖ Performance metrics are within acceptable ranges</li>
            <li>‚úÖ Security validations passed</li>
            <li>‚úÖ Production environment is stable</li>
          </ul>
          
          <p style=\"background-color: #d1ecf1; border: 1px solid #bee5eb; padding: 10px; border-radius: 5px;\">
            <strong>üéâ Success!</strong> Your users can now enjoy the latest features with confidence.
          </p>
          
          <hr>
          <p><small>This notification was sent by VirtualStitch Enhanced CI/CD Pipeline</small></p>"
          
        else
          SUBJECT="üö® URGENT - Production Issues Detected (${HEALTH_SCORE}%) - ${{ inputs.branch }}"
          
          # Generate enhanced health check results for failure
          HEALTH_RESULTS=""
          if [ "$HEALTH_CHECKS" != "{}" ]; then
            HEALTH_RESULTS="<h3>‚ùå Failed Health Checks (Score: ${HEALTH_SCORE}%)</h3><ul>"
            
            # Detailed status for each check
            SMOKE_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.smoke_tests // "unknown"')
            if [ "$SMOKE_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üî• Smoke Tests:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üî• Smoke Tests:</strong> ‚ùå CRITICAL FAILURE</li>"
            fi
            
            API_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.api_health // "unknown"')
            if [ "$API_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üåê API Health:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üåê API Health:</strong> ‚ùå CRITICAL FAILURE</li>"
            fi
            
            PERF_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.performance // "unknown"')
            if [ "$PERF_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>‚ö° Performance:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>‚ö° Performance:</strong> ‚ö†Ô∏è Performance Issues</li>"
            fi
            
            SEC_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.security // "unknown"')
            if [ "$SEC_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üõ°Ô∏è Security:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üõ°Ô∏è Security:</strong> ‚ö†Ô∏è Security Issues</li>"
            fi
            
            PROD_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.production_validation // "unknown"')
            if [ "$PROD_STATUS" = "success" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üöÄ Production Validation:</strong> ‚úÖ Passed</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üöÄ Production Validation:</strong> ‚ö†Ô∏è Validation Issues</li>"
            fi
            
            SSL_STATUS=$(echo "$HEALTH_CHECKS" | jq -r '.ssl_certificate // "unknown"')
            if [ "$SSL_STATUS" = "valid" ]; then
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üîí SSL Certificate:</strong> ‚úÖ Valid</li>"
            else
              HEALTH_RESULTS="${HEALTH_RESULTS}<li><strong>üîí SSL Certificate:</strong> ‚ö†Ô∏è Certificate Issues</li>"
            fi
            
            HEALTH_RESULTS="${HEALTH_RESULTS}</ul>"
          fi
          
          # Urgency level based on health score
          if [ $HEALTH_SCORE -lt 25 ]; then
            URGENCY="üö® CRITICAL"
            URGENCY_COLOR="#dc3545"
          elif [ $HEALTH_SCORE -lt 50 ]; then
            URGENCY="‚ö†Ô∏è HIGH"
            URGENCY_COLOR="#fd7e14"
          else
            URGENCY="üìä MODERATE"
            URGENCY_COLOR="#ffc107"
          fi
          
          BODY="<h2>‚ö†Ô∏è Production Deployment Has Issues!</h2>
          
          <div style=\"background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; margin-bottom: 20px;\">
            <h3 style=\"margin-top: 0; color: #721c24;\">üö® Health Score: ${HEALTH_SCORE}% - ${URGENCY}</h3>
            <p style=\"margin-bottom: 0; color: #721c24; font-weight: bold;\">Immediate attention required! Production deployment has critical issues.</p>
          </div>
          
          <h3>üìã Deployment Details</h3>
          <ul>
            <li><strong>üåê URL:</strong> <a href=\"${{ inputs.deployment_url }}\">${{ inputs.deployment_url }}</a></li>
            <li><strong>üìù Commit:</strong> <code>${{ inputs.commit_sha }}</code></li>
            <li><strong>üåø Branch:</strong> ${{ inputs.branch }}</li>
            <li><strong>üë§ Author:</strong> ${{ inputs.author }}</li>
            <li><strong>‚è∞ Time:</strong> ${TIMESTAMP}</li>
          </ul>
          
          ${HEALTH_RESULTS}
          
          <h3>üö® Critical Actions Required</h3>
          <ol>
            <li><strong>Immediate Assessment:</strong> Review failed health checks above</li>
            <li><strong>Check Logs:</strong> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">View detailed logs and test results</a></li>
            <li><strong>User Impact:</strong> Assess if users are experiencing issues</li>
            <li><strong>Rollback Decision:</strong> Consider reverting to previous stable version if critical</li>
            <li><strong>Team Notification:</strong> Alert on-call team and stakeholders</li>
          </ol>
          
          <h3>üîó Investigation Resources</h3>
          <ul>
            <li><a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">üìä Detailed workflow logs and test results</a></li>
            <li><a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ inputs.commit_sha }}\">üìù View commit changes and diff</a></li>
            <li><a href=\"${{ inputs.deployment_url }}\">üåê Live deployment (check manually)</a></li>
            <li><a href=\"${{ github.server_url }}/${{ github.repository }}/deployments\">üöÄ Deployment history</a></li>
          </ul>
          
          <div style=\"background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px;\">
            <strong>‚è∞ Time-sensitive:</strong> Please investigate immediately. Consider rolling back if issues impact user experience.
          </div>
          
          <hr>
          <p><small>This alert was sent by VirtualStitch Enhanced CI/CD Pipeline</small></p>"
        fi

        # Save to environment for next step
        echo "EMAIL_SUBJECT=$SUBJECT" >> $GITHUB_ENV
        echo "EMAIL_BODY<<EOF" >> $GITHUB_ENV
        echo "$BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Send enhanced email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ inputs.smtp_username }}
        password: ${{ inputs.smtp_password }}
        subject: ${{ env.EMAIL_SUBJECT }}
        to: ${{ inputs.recipient_email }}
        from: 'VirtualStitch Enhanced CI <${{ inputs.smtp_username }}>'
        html_body: ${{ env.EMAIL_BODY }}
        priority: ${{ inputs.type == 'failure' && 'high' || 'normal' }}
