name: Production Monitoring

permissions:
  contents: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  repository_dispatch:
    types: [vercel.deployment.success]

jobs:
  production-monitoring:
    name: üöÄ Production Health Check
    runs-on:
      - self-hosted
      - Linux
      - ARM64

    if: >
      github.event_name == 'repository_dispatch' && 
      github.event.client_payload.environment == 'production'

    timeout-minutes: 15

    env:
      NODE_ENV: test
      BASE_URL: ${{ github.event.client_payload.url }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
      VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.git.sha }}

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: 'Production Monitoring'
          action: create
          status: in_progress
          title: 'üöÄ Production health check starting...'
          summary: 'Running comprehensive production validation and monitoring...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üíæ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: ‚è≥ Wait for production deployment
        uses: ./.github/actions/wait-for-deployment
        with:
          url: ${{ github.event.client_payload.url }}
          timeout_seconds: 120
          check_interval: 15
          max_attempts: 8
          initial_wait: 60
          vercel_bypass_secret: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}

      - name: üî• Run critical smoke tests
        id: smoke_tests
        run: npm run test:smoke -- --project=chromium --reporter=list
        env:
          CI: true
        continue-on-error: true

      - name: üè• Run API health checks
        id: api_health
        run: npm run test:api-health -- --project=chromium --reporter=list
        env:
          CI: true
        continue-on-error: true

      - name: ‚ö° Run performance monitoring
        id: performance
        run: npm run test:performance -- --project=chromium --reporter=list
        env:
          CI: true
        continue-on-error: true

      - name: üõ°Ô∏è Run security validation
        id: security
        run: npm run test:security -- --project=chromium --reporter=list
        env:
          CI: true
        continue-on-error: true

      - name: üìä Run production validation tests
        id: production_validation
        run: npm run test:production -- --project=chromium --reporter=list
        env:
          CI: true
        continue-on-error: true

      - name: üîí Check SSL certificate
        id: ssl_check
        run: |
          # Extract domain from URL
          DOMAIN=$(echo "${{ github.event.client_payload.url }}" | sed -E 's/https?:\/\/([^\/]+).*/\1/')
          echo "Checking SSL certificate for domain: $DOMAIN"

          # Check SSL certificate
          if openssl s_client -connect "${DOMAIN}:443" -servername "${DOMAIN}" < /dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null; then
            echo "ssl_status=valid" >> $GITHUB_OUTPUT
            
            # Get certificate expiry
            EXPIRY=$(openssl s_client -connect "${DOMAIN}:443" -servername "${DOMAIN}" < /dev/null 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
            echo "ssl_expiry=$EXPIRY" >> $GITHUB_OUTPUT
            echo "‚úÖ SSL certificate is valid. Expires: $EXPIRY"
          else
            echo "ssl_status=invalid" >> $GITHUB_OUTPUT
            echo "‚ùå SSL certificate check failed"
          fi
        continue-on-error: true

      - name: üìä Collect deployment metrics
        id: metrics
        run: |
          echo "deployment_time=$(date -Iseconds)" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.event.client_payload.git.sha }}" >> $GITHUB_OUTPUT
          echo "deploy_url=${{ github.event.client_payload.url }}" >> $GITHUB_OUTPUT

          # Create comprehensive health check summary
          HEALTH_CHECKS=$(cat << EOF
          {
            "smoke_tests": "${{ steps.smoke_tests.outcome }}",
            "api_health": "${{ steps.api_health.outcome }}",
            "performance": "${{ steps.performance.outcome }}",
            "security": "${{ steps.security.outcome }}",
            "production_validation": "${{ steps.production_validation.outcome }}",
            "ssl_certificate": "${{ steps.ssl_check.outputs.ssl_status }}"
          }
          EOF
          )

          echo "health_checks<<EOF" >> $GITHUB_OUTPUT
          echo "$HEALTH_CHECKS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Calculate overall health score
          PASSED_TESTS=0
          TOTAL_TESTS=6

          [[ "${{ steps.smoke_tests.outcome }}" == "success" ]] && ((PASSED_TESTS++))
          [[ "${{ steps.api_health.outcome }}" == "success" ]] && ((PASSED_TESTS++))
          [[ "${{ steps.performance.outcome }}" == "success" ]] && ((PASSED_TESTS++))
          [[ "${{ steps.security.outcome }}" == "success" ]] && ((PASSED_TESTS++))
          [[ "${{ steps.production_validation.outcome }}" == "success" ]] && ((PASSED_TESTS++))
          [[ "${{ steps.ssl_check.outputs.ssl_status }}" == "valid" ]] && ((PASSED_TESTS++))

          HEALTH_SCORE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT

      - name: ‚úÖ Update Check on Success
        if: >
          steps.smoke_tests.outcome == 'success' &&
          steps.api_health.outcome == 'success' &&
          steps.performance.outcome == 'success' &&
          steps.security.outcome == 'success' &&
          steps.production_validation.outcome == 'success'
        uses: ./.github/actions/github-check
        with:
          check_name: 'Production Monitoring'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ Production health check passed'
          summary: |
            üéâ **Production deployment is healthy!**

            **Health Score: ${{ steps.metrics.outputs.health_score }}%**

            | Check | Status |
            |-------|--------|
            | Smoke Tests | ‚úÖ Passed |
            | API Health | ‚úÖ Passed |
            | Performance | ‚úÖ Passed |
            | Security | ‚úÖ Passed |
            | Production Validation | ‚úÖ Passed |
            | SSL Certificate | ${{ steps.ssl_check.outputs.ssl_status == 'valid' && '‚úÖ Valid' || '‚ö†Ô∏è Issues' }} |

            **Deployment Details:**
            - **URL:** ${{ github.event.client_payload.url }}
            - **Commit:** `${{ github.event.client_payload.git.sha }}`
            - **Time:** ${{ steps.metrics.outputs.deployment_time }}

            üöÄ All systems operational!

      - name: ‚ö†Ô∏è Update Check on Partial Success
        if: >
          (steps.smoke_tests.outcome == 'success' &&
           steps.api_health.outcome == 'success') &&
          (steps.performance.outcome != 'success' ||
           steps.security.outcome != 'success' ||
           steps.production_validation.outcome != 'success')
        uses: ./.github/actions/github-check
        with:
          check_name: 'Production Monitoring'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚ö†Ô∏è Production running with warnings'
          summary: |
            ‚ö†Ô∏è **Production is functional but has warnings**

            **Health Score: ${{ steps.metrics.outputs.health_score }}%**

            | Check | Status |
            |-------|--------|
            | Smoke Tests | ${{ steps.smoke_tests.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | API Health | ${{ steps.api_health.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | Performance | ${{ steps.performance.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | Security | ${{ steps.security.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | Production Validation | ${{ steps.production_validation.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | SSL Certificate | ${{ steps.ssl_check.outputs.ssl_status == 'valid' && '‚úÖ Valid' || '‚ö†Ô∏è Issues' }} |

            Core functionality is operational, but consider addressing warnings.

      - name: ‚ùå Update Check on Failure
        if: >
          steps.smoke_tests.outcome == 'failure' ||
          steps.api_health.outcome == 'failure'
        uses: ./.github/actions/github-check
        with:
          check_name: 'Production Monitoring'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: 'üö® Production health check failed'
          summary: |
            üö® **CRITICAL: Production deployment has issues!**

            **Health Score: ${{ steps.metrics.outputs.health_score }}%**

            | Check | Status |
            |-------|--------|
            | Smoke Tests | ${{ steps.smoke_tests.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | API Health | ${{ steps.api_health.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | Performance | ${{ steps.performance.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | Security | ${{ steps.security.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | Production Validation | ${{ steps.production_validation.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |
            | SSL Certificate | ${{ steps.ssl_check.outputs.ssl_status == 'valid' && '‚úÖ Valid' || '‚ö†Ô∏è Issues' }} |

            **Immediate action required!** Consider rollback if critical.

      - name: ‚úÖ Send success notification
        if: >
          steps.smoke_tests.outcome == 'success' &&
          steps.api_health.outcome == 'success' &&
          steps.performance.outcome == 'success' &&
          steps.security.outcome == 'success' &&
          steps.production_validation.outcome == 'success'
        uses: ./.github/actions/send-notifications
        with:
          type: success
          deployment_url: ${{ github.event.client_payload.url }}
          commit_sha: ${{ github.event.client_payload.git.sha }}
          branch: ${{ github.event.client_payload.git.branch }}
          author: ${{ github.event.client_payload.git.author }}
          smtp_username: ${{ secrets.SMTP_USERNAME }}
          smtp_password: ${{ secrets.SMTP_PASSWORD }}
          recipient_email: ${{ secrets.NOTIFICATION_EMAIL }}
          health_checks: ${{ steps.metrics.outputs.health_checks }}

      - name: üö® Send failure notification
        if: >
          steps.smoke_tests.outcome == 'failure' ||
          steps.api_health.outcome == 'failure'
        uses: ./.github/actions/send-notifications
        with:
          type: failure
          deployment_url: ${{ github.event.client_payload.url }}
          commit_sha: ${{ github.event.client_payload.git.sha }}
          branch: ${{ github.event.client_payload.git.branch }}
          author: ${{ github.event.client_payload.git.author }}
          smtp_username: ${{ secrets.SMTP_USERNAME }}
          smtp_password: ${{ secrets.SMTP_PASSWORD }}
          recipient_email: ${{ secrets.NOTIFICATION_EMAIL }}
          health_checks: ${{ steps.metrics.outputs.health_checks }}

      - name: üì§ Upload production test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: production-monitoring-artifacts-${{ github.run_id }}
          path: |
            test-results/playwright/
          retention-days: 14

      - name: üìä Upload production metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-metrics-${{ github.run_id }}
          path: |
            test-results/playwright/performance/
            test-results/playwright/api/
          retention-days: 30

      - name: üìù Production monitoring summary
        if: always()
        run: |
          echo "## üöÄ Production Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Health Score: ${{ steps.metrics.outputs.health_score }}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${{ github.event.client_payload.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.event.client_payload.git.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.client_payload.git.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.event.client_payload.git.author }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** ${{ steps.metrics.outputs.deployment_time }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ steps.smoke_tests.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Health | ${{ steps.api_health.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ steps.performance.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ steps.security.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Validation | ${{ steps.production_validation.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SSL Certificate | ${{ steps.ssl_check.outputs.ssl_status == 'valid' && '‚úÖ Valid' || '‚ö†Ô∏è Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

          # Add notification status
          if [[ "${{ steps.smoke_tests.outcome }}" == "success" && "${{ steps.api_health.outcome }}" == "success" && "${{ steps.performance.outcome }}" == "success" && "${{ steps.security.outcome }}" == "success" && "${{ steps.production_validation.outcome }}" == "success" ]]; then
            echo "**üìß Notification:** Success email sent" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.smoke_tests.outcome }}" == "failure" || "${{ steps.api_health.outcome }}" == "failure" ]]; then
            echo "**üìß Notification:** Failure alert sent" >> $GITHUB_STEP_SUMMARY
          else
            echo "**üìß Notification:** Partial success - no alert sent" >> $GITHUB_STEP_SUMMARY
          fi

          # Add health score visualization
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Health Score Breakdown" >> $GITHUB_STEP_SUMMARY
          SCORE=${{ steps.metrics.outputs.health_score }}
          if [ $SCORE -ge 90 ]; then
            echo "üü¢ **Excellent** ($SCORE%)" >> $GITHUB_STEP_SUMMARY
          elif [ $SCORE -ge 75 ]; then
            echo "üü° **Good** ($SCORE%)" >> $GITHUB_STEP_SUMMARY
          elif [ $SCORE -ge 50 ]; then
            echo "üü† **Warning** ($SCORE%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "üî¥ **Critical** ($SCORE%)" >> $GITHUB_STEP_SUMMARY
          fi
