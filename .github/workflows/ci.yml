name: CI

permissions:
  checks: write
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_ENV: test
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
  UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

jobs:
  # Fast feedback with smoke tests
  smoke-tests:
    name: üî• Smoke Tests
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 5

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üéØ Determine context
        id: context
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "check_name=Smoke Tests" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "check_name=Smoke Tests" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: create
          status: in_progress
          title: 'üöß Running critical path smoke tests...'
          summary: 'Validating essential functionality and basic interactions...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üî• Run smoke tests
        id: smoke
        run: npm run test:smoke

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: ./.github/actions/github-check
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ Smoke tests passed'
          summary: |
            üéâ **Critical path validation successful!**

            All essential functionality is working correctly:
            - ‚úÖ Homepage loads correctly
            - ‚úÖ Navigation to customizer works
            - ‚úÖ Basic UI components render
            - ‚úÖ Core interactions functional

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: ./.github/actions/github-check
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: '‚ùå Smoke tests failed'
          summary: |
            üö® **Critical functionality is broken!**

            Essential features are not working. Check the [logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) immediately.

  # Main CI checks
  ci-checks:
    name: ‚úÖ CI Checks
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 10
    needs: smoke-tests

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üéØ Determine context
        id: context
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "target_env=preview" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "target_env=production" >> $GITHUB_OUTPUT
          else
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "target_env=preview" >> $GITHUB_OUTPUT
          fi

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: create
          status: in_progress
          title: 'üöß CI checks starting...'
          summary: 'Running linting, type checks, Jest tests, and build verification...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üîé Lint code
        id: lint
        run: npm run lint

      - name: üîç TypeScript type check
        id: typecheck
        run: npm run type-check

      - name: üß™ Run Jest tests with coverage
        id: test
        run: npm run test:coverage

      - name: üèóÔ∏è Build application
        id: build
        run: npm run build

      - name: ‚úÖ Verify build output
        id: verify
        run: |
          if [ ! -d ".next" ] && [ ! -d "dist" ] && [ ! -d "build" ]; then
            echo "‚ùå Build output directory not found"
            exit 1
          fi
          echo "‚úÖ Build completed successfully"

      - name: üìä Upload coverage (PR only)
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/coverage/lcov.info
          directory: ./test-results/coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: üìù Generate step summary
        if: always()
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ steps.lint.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ steps.typecheck.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Jest Tests | ${{ steps.test.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ steps.build.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Verification | ${{ steps.verify.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: ${{ steps.context.outputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

      - name: üì§ Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-build-artifacts-${{ github.run_id }}
          path: |
            .next/
            dist/
            build/
            test-results/
          retention-days: 7

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: ./.github/actions/github-check
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ All CI checks passed'
          summary: |
            ‚úÖ **All CI checks passed successfully!**

            | Check | Status |
            |-------|--------|
            | Linting | ‚úÖ Passed |
            | Type Check | ‚úÖ Passed |
            | Jest Tests | ‚úÖ Passed |
            | Build | ‚úÖ Passed |
            | Verification | ‚úÖ Passed |

            **Next steps:**
            ${{ github.event_name == 'pull_request' && '- E2E tests will run once Vercel preview deployment is ready' || '- Production deployment monitoring will begin' }}

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: ./.github/actions/github-check
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: '‚ùå CI checks failed'
          summary: |
            ‚ùå **CI checks failed**

            **Failed steps:** ${{ steps.lint.outcome == 'failure' && 'Linting' || '' }} ${{ steps.typecheck.outcome == 'failure' && 'Type Check' || '' }} ${{ steps.test.outcome == 'failure' && 'Jest Tests' || '' }} ${{ steps.build.outcome == 'failure' && 'Build' || '' }} ${{ steps.verify.outcome == 'failure' && 'Verification' || '' }}

            **Next steps:**
            1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error messages
            2. Fix the issues locally
            3. Push your changes to re-run the checks

      - name: ‚ö†Ô∏è Update Check on Cancellation
        if: cancelled()
        uses: ./.github/actions/github-check
        with:
          check_name: ${{ steps.context.outputs.check_name }}
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: cancelled
          title: '‚ö†Ô∏è CI checks cancelled'
          summary: 'The CI workflow was cancelled before completion.'

  # Core functionality tests (runs after CI)
  core-tests:
    name: üß™ Core Tests
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 15
    needs: ci-checks
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    env:
      BASE_URL: http://localhost:3000

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: 'Core Tests'
          action: create
          status: in_progress
          title: 'üß™ Running core functionality tests...'
          summary: 'Testing individual components and features...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run core tests
        id: core
        run: npm run test:core

      - name: üì§ Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-test-results-${{ github.run_id }}
          path: test-results/playwright/
          retention-days: 7

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: ./.github/actions/github-check
        with:
          check_name: 'Core Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ Core tests passed'
          summary: |
            üéâ **All core functionality tests passed!**

            Component testing completed successfully:
            - ‚úÖ Home page functionality
            - ‚úÖ Customizer interface
            - ‚úÖ Color picker operations
            - ‚úÖ File upload handling
            - ‚úÖ AI picker interactions
            - ‚úÖ Image download features
            - ‚úÖ Canvas rendering

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: ./.github/actions/github-check
        with:
          check_name: 'Core Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: '‚ùå Core tests failed'
          summary: |
            ‚ùå **Core functionality tests failed**

            Check the [test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

  # Quality assurance tests (parallel with core tests)
  quality-tests:
    name: üõ°Ô∏è Quality Tests
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 20
    needs: ci-checks
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    env:
      BASE_URL: http://localhost:3000

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: 'Quality Tests'
          action: create
          status: in_progress
          title: 'üõ°Ô∏è Running quality assurance tests...'
          summary: 'Testing accessibility, performance, security, and responsive design...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run quality tests
        id: quality
        run: npm run test:quality

      - name: üì§ Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-test-results-${{ github.run_id }}
          path: test-results/playwright/
          retention-days: 7

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: ./.github/actions/github-check
        with:
          check_name: 'Quality Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ Quality tests passed'
          summary: |
            üéâ **All quality assurance tests passed!**

            Quality validation completed successfully:
            - ‚úÖ Accessibility (WCAG compliance)
            - ‚úÖ Performance benchmarks
            - ‚úÖ Security validation
            - ‚úÖ Responsive design

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: ./.github/actions/github-check
        with:
          check_name: 'Quality Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: '‚ùå Quality tests failed'
          summary: |
            ‚ùå **Quality assurance tests failed**

            Quality issues detected. Check the [test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

  # API health checks (parallel with other tests)
  api-tests:
    name: üåê API Tests
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 10
    needs: ci-checks

    env:
      BASE_URL: http://localhost:3000
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üìù Create GitHub Check
        uses: ./.github/actions/github-check
        id: check_run
        with:
          check_name: 'API Tests'
          action: create
          status: in_progress
          title: 'üåê Running API health checks...'
          summary: 'Testing API endpoints and integration scenarios...'

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run API tests
        id: api
        run: npm run test:api

      - name: üì§ Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results-${{ github.run_id }}
          path: test-results/playwright/
          retention-days: 7

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: ./.github/actions/github-check
        with:
          check_name: 'API Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: success
          title: '‚úÖ API tests passed'
          summary: |
            üéâ **All API tests passed!**

            API validation completed successfully:
            - ‚úÖ Health check endpoints
            - ‚úÖ Integration scenarios
            - ‚úÖ Error handling
            - ‚úÖ Rate limiting

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: ./.github/actions/github-check
        with:
          check_name: 'API Tests'
          action: update
          check_run_id: ${{ steps.check_run.outputs.check_run_id }}
          status: completed
          conclusion: failure
          title: '‚ùå API tests failed'
          summary: |
            ‚ùå **API tests failed**

            API issues detected. Check the [test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
