name: CI

permissions:
  checks: write
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_ENV: test
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
  UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

jobs:
  ci-checks:
    name: ‚úÖ CI Checks
    runs-on:
      - self-hosted
      - Linux
      - ARM64
    timeout-minutes: 10

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üéØ Determine context
        id: context
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "target_env=preview" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "target_env=production" >> $GITHUB_OUTPUT
          else
            echo "check_name=CI Checks" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "target_env=preview" >> $GITHUB_OUTPUT
          fi

      - name: üìù Create GitHub Check
        uses: actions/github-script@v7
        id: check_run
        with:
          script: |
            const checkName = '${{ steps.context.outputs.check_name }}';
            const { data: checkRun } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: context.sha,
              status: 'in_progress',
              started_at: new Date().toISOString(),
              output: {
                title: 'üöß CI checks starting...',
                summary: 'Running linting, type checks, Jest tests, and build verification...'
              }
            });
            core.info(`‚úÖ Created check: ${checkName} (ID: ${checkRun.id})`);
            return checkRun.id;

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üîé Lint code
        id: lint
        run: npm run lint

      - name: üîç TypeScript type check
        id: typecheck
        run: npm run type-check

      - name: üß™ Run Jest tests with coverage
        id: test
        run: npm run test:coverage

      - name: üèóÔ∏è Build application
        id: build
        run: npm run build

      - name: ‚úÖ Verify build output
        id: verify
        run: |
          if [ ! -d ".next" ] && [ ! -d "dist" ] && [ ! -d "build" ]; then
            echo "‚ùå Build output directory not found"
            exit 1
          fi
          echo "‚úÖ Build completed successfully"

      - name: üìä Upload coverage (PR only)
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/coverage/lcov.info
          directory: ./test-results/coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: üìù Generate step summary
        if: always()
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ steps.lint.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ steps.typecheck.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Jest Tests | ${{ steps.test.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ steps.build.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Verification | ${{ steps.verify.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: ${{ steps.context.outputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

      - name: üì§ Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-build-artifacts-${{ github.run_id }}
          path: |
            .next/
            dist/
            build/
            test-results/
          retention-days: 7

      - name: ‚úÖ Update Check on Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const summary = [
              '‚úÖ **All CI checks passed successfully!**',
              '',
              '| Check | Status |',
              '|-------|--------|',
              '| Linting | ‚úÖ Passed |',
              '| Type Check | ‚úÖ Passed |', 
              '| Jest Tests | ‚úÖ Passed |',
              '| Build | ‚úÖ Passed |',
              '| Verification | ‚úÖ Passed |',
              '',
              '**Next steps:**',
              '${{ github.event_name == 'pull_request' && '- E2E tests will run once Vercel preview deployment is ready' || '- Production deployment monitoring will begin' }}'
            ].join('\n');

            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.check_run.outputs.result }},
              status: 'completed',
              conclusion: 'success',
              completed_at: new Date().toISOString(),
              output: {
                title: '‚úÖ All CI checks passed',
                summary: summary
              }
            });

      - name: ‚ùå Update Check on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const failedSteps = [];
            if ('${{ steps.lint.outcome }}' === 'failure') failedSteps.push('Linting');
            if ('${{ steps.typecheck.outcome }}' === 'failure') failedSteps.push('Type Check');
            if ('${{ steps.test.outcome }}' === 'failure') failedSteps.push('Jest Tests');
            if ('${{ steps.build.outcome }}' === 'failure') failedSteps.push('Build');
            if ('${{ steps.verify.outcome }}' === 'failure') failedSteps.push('Verification');

            const summary = [
              '‚ùå **CI checks failed**',
              '',
              `**Failed steps:** ${failedSteps.join(', ')}`,
              '',
              '**Next steps:**',
              '1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error messages',
              '2. Fix the issues locally',
              '3. Push your changes to re-run the checks'
            ].join('\n');

            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.check_run.outputs.result }},
              status: 'completed',
              conclusion: 'failure',
              completed_at: new Date().toISOString(),
              output: {
                title: '‚ùå CI checks failed',
                summary: summary
              }
            });

      - name: ‚ö†Ô∏è Update Check on Cancellation
        if: cancelled()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.check_run.outputs.result }},
              status: 'completed',
              conclusion: 'cancelled',
              completed_at: new Date().toISOString(),
              output: {
                title: '‚ö†Ô∏è CI checks cancelled',
                summary: 'The CI workflow was cancelled before completion.'
              }
            });
