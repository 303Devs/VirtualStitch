# File: .github/workflows/auto-merge.yml
name: Auto Merge

permissions:
  contents: write
  pull-requests: write
  checks: read

on:
  check_run:
    types: [completed]
  workflow_run:
    workflows: ['CI', 'Preview E2E Tests']
    types: [completed]

jobs:
  load-config:
    name: Load Pipeline Configuration
    runs-on: ubuntu-latest
    outputs:
      required-checks: ${{ steps.config.outputs.required-checks }}
      merge-method: ${{ steps.config.outputs.merge-method }}
      commit-message-template: ${{ steps.config.outputs.commit-message-template }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load configuration
        id: config
        run: |
          if [ -f .github/config/pipeline.yml ]; then
            # Extract required checks from config
            REQUIRED_CHECKS=$(yq eval '.auto_merge.required_checks | join(",")' .github/config/pipeline.yml)
            MERGE_METHOD=$(yq eval '.auto_merge.merge_method' .github/config/pipeline.yml)
            COMMIT_TEMPLATE=$(yq eval '.auto_merge.commit_message_template' .github/config/pipeline.yml)
          else
            # Fallback to defaults
            REQUIRED_CHECKS="✅ ci-checks,playwright-tests (chromium),playwright-tests (firefox),playwright-tests (webkit)"
            MERGE_METHOD="squash"
            COMMIT_TEMPLATE="🤖 Automatically merged after all checks passed"
          fi

          echo "required-checks=$REQUIRED_CHECKS" >> $GITHUB_OUTPUT
          echo "merge-method=$MERGE_METHOD" >> $GITHUB_OUTPUT
          echo "commit-message-template<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_TEMPLATE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: load-config
    if: >
      (github.event_name == 'check_run' && github.event.check_run.conclusion == 'success') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find associated pull request
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            let headSha;

            if (context.eventName === 'check_run') {
              headSha = context.payload.check_run.head_sha;
            } else if (context.eventName === 'workflow_run') {
              headSha = context.payload.workflow_run.head_sha;
            } else {
              console.log('Unsupported event type');
              return { found: false };
            }

            console.log(`Looking for PR with head SHA: ${headSha}`);

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc'
            });

            const pr = prs.find(pr => pr.head.sha === headSha);

            if (!pr) {
              console.log('No open PR found for this SHA');
              return { found: false };
            }

            // Check if PR is in draft state
            if (pr.draft) {
              console.log(`PR #${pr.number} is in draft state, skipping auto-merge`);
              return { found: false, reason: 'draft' };
            }

            // Sanitize PR title to prevent injection
            const sanitizedTitle = pr.title
              .replace(/[<>'"&]/g, char => ({
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                '&': '&amp;'
              }[char]));

            console.log(`Found PR #${pr.number}: ${sanitizedTitle}`);
            return {
              found: true,
              number: pr.number,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref,
              head_ref: pr.head.ref,
              title: sanitizedTitle,
              is_draft: pr.draft
            };

      - name: Check if all required checks pass
        id: check-status
        uses: actions/github-script@v7
        if: fromJSON(steps.find-pr.outputs.result).found
        with:
          script: |
            const pr = ${{ steps.find-pr.outputs.result }};
            const requiredChecksStr = '${{ needs.load-config.outputs.required-checks }}';
            const requiredChecks = requiredChecksStr.split(',').map(s => s.trim());

            console.log('Required checks:', requiredChecks);

            // Get all check runs for the head SHA
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head_sha,
              per_page: 100
            });

            console.log('All check runs:', checkRuns.check_runs.map(c => 
              `${c.name}: ${c.status}/${c.conclusion}`
            ));

            let allChecksPassed = true;
            const checkResults = {};
            const missingChecks = [];
            const failedChecks = [];
            const pendingChecks = [];

            for (const requiredCheck of requiredChecks) {
              const checkRun = checkRuns.check_runs.find(c => c.name === requiredCheck);
              
              if (!checkRun) {
                console.log(`❌ Required check "${requiredCheck}" not found`);
                allChecksPassed = false;
                missingChecks.push(requiredCheck);
                checkResults[requiredCheck] = 'missing';
              } else if (checkRun.status !== 'completed') {
                console.log(`⏳ Required check "${requiredCheck}" still running: ${checkRun.status}`);
                allChecksPassed = false;
                pendingChecks.push(requiredCheck);
                checkResults[requiredCheck] = 'in_progress';
              } else if (checkRun.conclusion !== 'success') {
                console.log(`❌ Required check "${requiredCheck}" failed: ${checkRun.conclusion}`);
                allChecksPassed = false;
                failedChecks.push(requiredCheck);
                checkResults[requiredCheck] = checkRun.conclusion;
              } else {
                console.log(`✅ Required check "${requiredCheck}" passed`);
                checkResults[requiredCheck] = 'success';
              }
            }

            return {
              should_merge: allChecksPassed,
              check_results: checkResults,
              missing_checks: missingChecks,
              failed_checks: failedChecks,
              pending_checks: pendingChecks,
              pr_number: pr.number,
              head_sha: pr.head_sha
            };

      - name: Check for merge conflicts
        id: conflict-check
        if: >
          fromJSON(steps.find-pr.outputs.result).found && 
          fromJSON(steps.check-status.outputs.result).should_merge
        uses: actions/github-script@v7
        with:
          script: |
            const pr = ${{ steps.find-pr.outputs.result }};

            // Get PR details to check mergeable state
            const { data: prDetails } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            if (prDetails.mergeable === false) {
              console.log('❌ PR has merge conflicts');
              return { 
                has_conflicts: true,
                mergeable_state: prDetails.mergeable_state 
              };
            }

            if (prDetails.mergeable_state === 'behind') {
              console.log('⚠️ PR is behind base branch');
              return { 
                has_conflicts: false,
                is_behind: true,
                mergeable_state: prDetails.mergeable_state 
              };
            }

            console.log('✅ PR is ready to merge');
            return { 
              has_conflicts: false,
              is_behind: false,
              mergeable_state: prDetails.mergeable_state 
            };

      - name: Auto merge PR
        if: >
          fromJSON(steps.find-pr.outputs.result).found && 
          fromJSON(steps.check-status.outputs.result).should_merge &&
          !fromJSON(steps.conflict-check.outputs.result).has_conflicts
        uses: actions/github-script@v7
        with:
          script: |
            const checkStatus = ${{ steps.check-status.outputs.result }};
            const pr = ${{ steps.find-pr.outputs.result }};
            const conflictCheck = ${{ steps.conflict-check.outputs.result }};
            const mergeMethod = '${{ needs.load-config.outputs.merge-method }}';
            const commitTemplate = `${{ needs.load-config.outputs.commit-message-template }}`;

            try {
              console.log(`🚀 Auto-merging PR #${checkStatus.pr_number} using ${mergeMethod} method...`);
              
              const { data: mergeResult } = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: checkStatus.pr_number,
                commit_title: `Auto-merge: ${pr.title}`,
                commit_message: commitTemplate.trim(),
                merge_method: mergeMethod
              });
              
              console.log(`✅ Successfully auto-merged PR #${checkStatus.pr_number}`);
              console.log(`📝 Merge SHA: ${mergeResult.sha}`);
              
              // Create success comment
              const passedChecks = Object.entries(checkStatus.check_results)
                .filter(([name, status]) => status === 'success')
                .map(([name]) => `✅ **${name}**`)
                .join('\\n');

              const successMessage = [
                '🎉 **Auto-merge successful!**',
                '',
                'This PR was automatically merged after all required checks passed:',
                '',
                passedChecks,
                '',
                'The code is now live in production! 🚀',
                '',
                `*Merged using ${mergeMethod} method*`
              ].join('\\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: checkStatus.pr_number,
                body: successMessage
              });
              
            } catch (error) {
              console.log(`❌ Failed to auto-merge PR #${checkStatus.pr_number}: ${error.message}`);
              
              // Determine error type for better user feedback
              let errorDetails = error.message;
              if (error.message.includes('Pull Request is not mergeable')) {
                errorDetails = 'The pull request has merge conflicts that need to be resolved.';
              } else if (error.message.includes('Required status checks')) {
                errorDetails = 'Additional status checks are required by branch protection rules.';
              }
              
              const failureMessage = [
                '🤖 **Auto-merge failed**',
                '',
                `❌ **Error:** ${errorDetails}`,
                '',
                'All checks passed, but the merge failed. This might be due to:',
                '- Merge conflicts with the base branch',
                '- Branch protection rules requiring manual review',
                '- Repository permissions',
                '- Changes pushed after checks completed',
                '',
                'Please merge manually or resolve the issue and push an update.'
              ].join('\\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: checkStatus.pr_number,
                body: failureMessage
              });
              
              throw error;
            }

      - name: Log detailed status for debugging
        if: >
          fromJSON(steps.find-pr.outputs.result).found && 
          !fromJSON(steps.check-status.outputs.result).should_merge
        run: |
          echo "🔍 Auto-merge conditions not met:"
          echo '${{ steps.check-status.outputs.result }}' | jq -r '
            "Required checks status:",
            (.check_results | to_entries[] | "- \(.key): \(.value)"),
            "",
            if (.missing_checks | length > 0) then 
              "Missing checks:", (.missing_checks[] | "- \(.)")
            else empty end,
            "",
            if (.failed_checks | length > 0) then 
              "Failed checks:", (.failed_checks[] | "- \(.)")
            else empty end,
            "",
            if (.pending_checks | length > 0) then 
              "Pending checks:", (.pending_checks[] | "- \(.)")
            else empty end'

      - name: Update PR with status comment
        if: >
          fromJSON(steps.find-pr.outputs.result).found && 
          !fromJSON(steps.check-status.outputs.result).should_merge
        uses: actions/github-script@v7
        with:
          script: |
            const checkStatus = ${{ steps.check-status.outputs.result }};
            const pr = ${{ steps.find-pr.outputs.result }};

            const pendingChecks = checkStatus.pending_checks || [];
            const failedChecks = checkStatus.failed_checks || [];
            const missingChecks = checkStatus.missing_checks || [];

            if (pendingChecks.length > 0 || failedChecks.length > 0 || missingChecks.length > 0) {
              const messageParts = ['🤖 **Auto-merge status update**', ''];
              
              if (pendingChecks.length > 0) {
                messageParts.push('⏳ **Waiting for checks to complete:**');
                messageParts.push(...pendingChecks.map(check => `- ${check}: ⏳ Running`));
                messageParts.push('');
              }
              
              if (missingChecks.length > 0) {
                messageParts.push('⚪ **Missing checks:**');
                messageParts.push(...missingChecks.map(check => `- ${check}: ⚪ Not started`));
                messageParts.push('');
              }
              
              if (failedChecks.length > 0) {
                messageParts.push('❌ **Failed checks preventing auto-merge:**');
                messageParts.push(...failedChecks.map(check => `- ${check}: ❌ Failed`));
                messageParts.push('');
                messageParts.push('Please fix the failed checks for auto-merge to proceed.');
              } else {
                messageParts.push('Will auto-merge once all checks pass! 🚀');
              }
              
              const body = messageParts.join('\\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: checkStatus.pr_number,
                body: body
              });
            }
